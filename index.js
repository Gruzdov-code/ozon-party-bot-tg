import {Telegraf} from "telegraf";
import {showMenu} from "./menu.js";
import fs from "fs";
import {quote} from "telegraf/format";
const data = fs.readFileSync("./users.json", "utf8", (err, data) => {
  if (err) throw err;

});
  global.users = JSON.parse(data);
  global.userIdList= (Object.keys(users))
// const HttpsProxyAgent = require('https-proxy-agent');
// –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const config = {
  "token": "7357115883:AAE4DozS0fVat5QCqSF4QgyMcOX7oKSyi4w", // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
  // "token": "6476063403:AAGQmIo4bMkHEIkWwa77qNfo3dYQuO_03eQ", // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
  "admin": 111, // —è
  // "admin": 451019148, // —è
  "barman": 639611757, // –í–æ–≤–∞
  "barman4": 559085599, // –ü—Ä–æ—à–∞
  "barman2": 197813146, // –õ–µ—Ä–∞
  // "barman3": 418259847 // –ö–æ–ª—Ç
};
// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
const bot = new Telegraf(config.token, {
      // –ï—Å–ª–∏ –Ω–∞–¥–æ —Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ - —É–∫–∞–∂–∏—Ç–µ: user, pass, host, port
      // telegram: { agent: new HttpsProxyAgent('http://user:pass@host:port') }
    }
);
// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
let replyText = {
  "helloAdmin": "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω, –∂–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
  "helloUser":  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
  "replyWrong": "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –û—Ç–≤–µ—Ç–∏—Ç—å/Reply."
};
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∞–≤–∞
let isAdmin = (userId) => {
  return userId == config.admin;
};

let isBarman = (userId) => {
  return userId == (config.barman || config.barman2 || config.barman4);
};


// const
setInterval(()=>{
fs.writeFile("./users.json", JSON.stringify(global.users), (err) => {
    if (err) throw err;
});
},10000)

const coctailList = userIdList.flatMap((el)=>{
  const result=[]
  result.push(...users[el].coctailList)
  return [...result]
})
const availableCoctails = []
 coctailList.map((el)=>{
  el.isAvailable ? availableCoctails.push([{text:el.fullName , callback_data:el.shortName}]) : ''
  return availableCoctails
})
const deliteAvailableCoctails = []
 coctailList.map((el)=>{
  deliteAvailableCoctails.push([{text: el.isAvailable ? el.fullName+' ‚úÖ' : el.fullName+ ' ‚ùå', callback_data:el.shortName}])
  return deliteAvailableCoctails
})

 const replyToUser = async (query, searchCoctail, userId) =>{
     bot.telegram.sendMessage(query.update.callback_query.from.id, '–í–∂—É—Ö! –ú—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º —Ç–≤–æ–π –∫–æ–∫—Ç–µ–π–ª—å. \n' +
         `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${searchCoctail.shortName+users[userId].orders.length}`)
      bot.telegram.sendMessage(query.update.callback_query.from.id, '–ê –ø–æ–∫–∞ –∂–¥–µ—à—å, –¥–æ–±–∞–≤—å —Å–µ–±–µ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –æ—Ç OZON –ë–∞–Ω–∫–∞ –¥–ª—è –æ—Å–æ–±–æ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤üòé')
       query.replyWithSticker('CAACAgIAAxkBAAIC0mZTlQ_Saj1mRPa8XDt8sUCaXDiSAALKQgACl_AxSsv-hHMxONVnNQQ')
}

 const sendReadyOrderToUser = async (query,userId) => {
     const textMgs = query.update.callback_query.message.text
     const  str1 = textMgs.indexOf("‚Ññ")+2
     const str2 = textMgs.indexOf(",")
     const orderNumber=  textMgs.slice(str1,str2)
     const searchClient = users[userId].orders.find((order)=> order.number==orderNumber ? order.client : '').client
     await  bot.telegram.sendMessage(searchClient, `–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ ${orderNumber} –≥–æ—Ç–æ–≤ `)
     await bot.telegram.editMessageReplyMarkup(query.update.callback_query.message.chat.id, query.update.callback_query.message.message_id, {reply_markup: {inline_keyboard: [[{text: '', callback_data: ''}]]}}
     )
     let newText = query.update.callback_query.message.text+' ‚úÖ'
     await bot.telegram.editMessageText(query.update.callback_query.message.chat.id, query.update.callback_query.message.message_id,  0,newText)
 }

 let isDelite = false
const coctailIsOver = async (query) => {
    if (!isDelite) return
    const userId = query.update.callback_query.from.id
    const textMgs = query.update.callback_query.message.text

   const searchCoctail = users[userId].coctailList.findIndex((coctail) => coctail.shortName === query.update.callback_query.data)
    if(users[userId].coctailList[searchCoctail].isAvailable===false){
        users[userId].coctailList[searchCoctail].isAvailable = true
        await query.reply(`–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–∫—Ç–µ–π–ª—å ${users[userId].coctailList[searchCoctail].fullName} –≤ —Å–ø–∏—Å–æ–∫`)
    }
    else {
        users[userId].coctailList[searchCoctail].isAvailable = false
   await query.reply(`–í—ã —É–±—Ä–∞–ª–∏ –∫–æ–∫—Ç–µ–π–ª—å ${users[userId].coctailList[searchCoctail].fullName} –∏–∑ —Å–ø–∏—Å–∫–∞`)
        isDelite=false

    }
}

 const newOrderFromUser = async (query,userId) => {
     for (let userId in users) {
         const searchCoctail = users[userId].coctailList.find((coctail) => coctail.shortName === query.update.callback_query.data)
         if (searchCoctail) {
             await bot.telegram.sendMessage(userId, `–ó–∞–∫–∞–∑ ‚Ññ ${searchCoctail.shortName + users[userId].orders.length}, –∫–æ–∫—Ç–µ–π–ª—å ${searchCoctail.fullName}`, {
                 reply_markup: {
                     inline_keyboard: [
                         [{text: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤', callback_data: 'readyOrder'}]
                     ]
                 },
             })
             users[userId].orders.push({
                 "number": searchCoctail.shortName + users[userId].orders.length,
                 "createdAt": new Date(),
                 "isDone": false,
                 "client": query.update.callback_query.from.id
             })

             await replyToUser(query, searchCoctail, userId)


         }
     }
 }




// –°–ª—É—à–∞–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ message
bot.on('message', (ctx) => {
  console.log('ctx',ctx.message)
if (ctx.message.text=='/start'){
    const textMenu ="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –æ—Ç–ø—É—Å–∫–Ω–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è?\n" +
        "–í—ã–±–∏—Ä–∞–π –ª—é–±–æ–π"
  showMenu(bot,ctx.message.chat.id,availableCoctails, textMenu)
}
    if (users[ctx.from.id]) {
        if (ctx.message.text == '/isover') {
            showMenu(bot, ctx.message.chat.id, deliteAvailableCoctails,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∫—Ç–µ–π–ª—å —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ\n"+
                `‚úÖ ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ  \n‚ùå ‚Äî –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ \n`)
            isDelite=true
        }
    }

})

// –°–ª—É—à–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫–∏ –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {

    if (!users) return
      if (users[query.update.callback_query.from.id]){
              switch (query.update.callback_query.data){
                  case 'readyOrder':
                      await sendReadyOrderToUser(query,query.update.callback_query.from.id)
                      break;

              }
                      if (isDelite){
                      await coctailIsOver(query)
                      }


      }
      else {
              await newOrderFromUser(query)

      }

  // }



})


// –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
bot.launch();